% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/OrthoNormalBsplines2D.R
\name{OrthoNormalBsplines2D}
\alias{OrthoNormalBsplines2D}
\title{Creating a two-dimensional othonormal B-splines basis}
\usage{
OrthoNormalBsplines2D(
  x,
  y,
  x.knots,
  y.knots,
  order = 2,
  ortho = "Redd",
  expand_knots = TRUE,
  ...
)
}
\arguments{
\item{x, y}{two vectors of argument values at which the B-spline basis functions are to be evaluated.}

\item{x.knots, y.knots}{The full set of knots used to define the basis functions.}

\item{order}{Order of the spline fit (degree= order-1). The default is 2.}

\item{ortho}{a character string which specify the orthogonalization method.
If it is "Redd", the \code{\link{orthogonalsplinebasis}} package is used.
If it is "GS", the Gram-Schmidt is used. The default is "Redd".}

\item{expand_knots}{a boolean. If it is TRUE, knots are expanded
for appropriate number of knots in bsplines (see \code{\link{expand.knots}}). The default is TRUE.}

\item{...}{other arguments (see \code{\link{SplineBasis}}).}
}
\value{
an array with two dimensional orthonormal B-splines.
The two first dimensions correspond to the data dimensions.
The last two dimensions correspond to the basis dimensions.
}
\description{
Creating a two-dimensional othonormal B-splines basis
}
\examples{

#####################################
#
#  Create two-dimensional data set
#
####################################

# inputs of the Campbell2D function
x1<-rep(-1,8); x2<-rep(5,8); x3<-c(5,3,1,-1,5,3,1,-1)
X <- rbind(x1,x2,x3)

# spatial domain of the Campbell2D output
nz<-64 # root of the size of the spatial domain
z<-seq(-90,90,length=nz)

# Campbell2D function
Y = Campbell2D(X,z,z)

###########################################
#
#  Create two-dimensional B-splines basis
#
###########################################

# knots for B-splines basis
K<-35
z.knots <- seq(-90,90,length=K)

# Generating a two-dimensional othonormal B-splines basis
OPhi <-OrthoNormalBsplines2D(z,z,z.knots,z.knots,ortho="GS")

########################
#
#  Get control points
#
########################

coeff_Y<-coef(OPhi,Y)

#######################
#
#  Approximation of Y
#
########################

hatY <-Inverse2D(OPhi,coeff_Y)


}
\seealso{
\code{\link{coef.OrthoNormalBsplines2D}} \code{\link{Inverse2D.OrthoNormalBsplines2D}}
\code{\link{Inverse2D}}
}
